#!/bin/bash
#html page maker
#this script outputs a html file and a cssfile (optional) with information about one's computer

## Constants

TITLE="System Info for"
RIGHT_NOW="$(date +"%x %r %Z")"
TIME_STAMP="Updated on $RIGHT_NOW by $USER"

## Global Variables
interactive=0
cssuse=0
filename=./system_page.html
cssfile=./mycss.css
response=

## Functions

function system_info {
  #find any release files in /etc
  
  if ls /etc/*release 1>/dev/null 2>&1; then
    echo "<h2>System release info</h2>"
    echo "<pre>"
    for i in /etc/*release; do
  
      #display 1st line of release files
      head -n 10 $i
      echo ""
      done
      uname -orp
      echo "</pre>"
  fi
}

function show_uptime {
  echo "<h2>System uptime</h2>"
  echo "<pre>"
  uptime
  echo "</pre>"
}

function drive_space {
  echo "<h2>Filesystem Space</h2>"
  echo "<pre>"
  df
  echo "</pre>"
}

function home_space {
  if [ "$(id -u)" = "0" ]; then
    echo "<h2>Home directory space by user</h2>"
    echo "<pre>"
    echo "Bytes           Directory"
    du -s /home/* | sort -nr
    echo "</pre>"
  else	
    echo "<h2>Home Directory space needs super user to calculate</h2>"
  fi
}

function home_space2 { 
  echo "<h2>Home Directory Space by User</h2>"
  echo "<pre>"
  format="%8s%10s%10s   %-s\n"
  printf "$format" "Dirs" "Files" "Blocks" "Directory"
  printf "$format" "----" "-----" "------" "---------"
  if [ $(id -u) = "0" ]; then
    dir_list="/home/*"
  else 
    dir_list=$HOME
  fi
  
  for home_dir in $dir_list; do
    total_dirs=$(find $home_dir -type d | wc -l)
    total_files=$(find $home_dir -type f |wc -l)
    total_blocks=$(du -s $home_dir)
    printf "$format" $total_dirs $total_files $total_blocks
  done
  echo "</pre>"
}


function write_page {
  
    echo "<HTML>"
    echo "<HEAD>"
    
    if [ "$cssuse" = "1" ]; then
      echo "	<link rel=\"stylesheet\" type=\"text/css\" href=\"$cssfile\">"
    fi
    
    cat <<- _EOF_
      <TITLE>
	$title $HOSTNAME
      </TITLE>
    </HEAD>

    <BODY>
      <H1> $title $HOSTNAME</H1>
      <P>$TIME_STAMP</P>
      $(system_info)
      $(show_uptime)
      $(drive_space)
      $(home_space2)
    </BODY>
    </HTML>
_EOF_
  
}

function generate_css {


    
  cat <<- _EOF2_
    h1, h2 {
      color: blue;
      font-size: 24px;
    }
    
    p {
      color: red;
      font-size: 12px;
    }
_EOF2_

}




function usage {
  echo "usage" 
  echo "-f or --filename outputfilename : declare output file (default: system_page.html)"
  echo "-c or --cssfile cssfilename : declare css file name"
  echo "-g or --generate_css cssfilename : generate css file with given name"
  echo "-i or --interactive : interactive mode"
  echo "-h or --help : display this"

}

## Main



while [ "$1" != "" ]; do
  case $1 in
    -f | --file ) 		shift
				filename=$1
				;;
    -i | --interactive )	interactive=1
				;;
    -h | --help )		usage
				exit
				;;
    -c | --cssfile )		cssuse=1
				shift
				cssfile=$1
				;;
    -g | --generate_css )     	shift
				cssfile=$1
				if [ "$cssfile" = "" ]; then
				  echo "No file name specified, Exiting program."
				else
				    generate_css > $cssfile
				fi
				exit
				;;
    * )				usage
				exit 1
  esac
  shift
done

if [ "$interactive" = "1" ]; then 
  
  
  echo -n "Enter name of output file [must be *.html] > "
  read response
  if [ -n "$response" ]; then #if it doesnt already exist
    filename=$response
  fi
  
  if [ -f $filename ]; then
    echo -n "Outfile file exists. Overwrite? (y/n) > "
    read response
    if [ "$response" != "y" ]; then
      echo "Exiting Program."
      exit 1
    fi
  fi
  
  echo -n "Enter name of Css File [must be *.css] > "
  read response
  if [ -f "$response" ]; then 
    echo "Css file set."
  else
    echo "Css file does not exist, Existing Program."
    exit 1
  fi
fi

echo "Css in use = $cssfile"
echo "output file = $filename"
echo "BOOM"

# Write page

write_page > $filename




























  